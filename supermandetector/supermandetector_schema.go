//
// Code generated by rdl 1.5.2 DO NOT EDIT.
//

package supermandetector

import (
	"log"

	rdl "github.com/ardielle/ardielle-go/rdl"
)

var schema *rdl.Schema

func init() {
	sb := rdl.NewSchemaBuilder("SupermanDetector")
	sb.Version(1)
	sb.Namespace("LexCorp")
	sb.Comment("A SupermanDetector API in *RDL*")

	tOctet := rdl.NewStringTypeBuilder("Octet")
	tOctet.Pattern("[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]")
	sb.AddType(tOctet.Build())

	tIPAddress := rdl.NewStringTypeBuilder("IPAddress")
	tIPAddress.Pattern("[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]\\.[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]\\.[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]\\.[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]")
	sb.AddType(tIPAddress.Build())

	tUnixTimestamp := rdl.NewAliasTypeBuilder("Int32", "UnixTimestamp")
	sb.AddType(tUnixTimestamp.Build())

	tLat := rdl.NewAliasTypeBuilder("Float64", "Lat")
	sb.AddType(tLat.Build())

	tLon := rdl.NewAliasTypeBuilder("Float64", "Lon")
	sb.AddType(tLon.Build())

	tRadius := rdl.NewAliasTypeBuilder("Int32", "Radius")
	sb.AddType(tRadius.Build())

	tSpeed := rdl.NewAliasTypeBuilder("Int32", "Speed")
	sb.AddType(tSpeed.Build())

	tIpAccessRequest := rdl.NewStructTypeBuilder("Struct", "IpAccessRequest")
	tIpAccessRequest.Field("username", "String", false, nil, "")
	tIpAccessRequest.Field("unix_timestamp", "Int32", false, nil, "")
	tIpAccessRequest.Field("event_uuid", "String", false, nil, "")
	tIpAccessRequest.Field("ip_address", "IPAddress", false, nil, "")
	sb.AddType(tIpAccessRequest.Build())

	tCurrentGeo := rdl.NewStructTypeBuilder("Struct", "CurrentGeo")
	tCurrentGeo.Field("lat", "Float64", false, nil, "")
	tCurrentGeo.Field("lon", "Float64", false, nil, "")
	tCurrentGeo.Field("radius", "Int32", false, nil, "")
	sb.AddType(tCurrentGeo.Build())

	tIpAccess := rdl.NewStructTypeBuilder("Struct", "IpAccess")
	tIpAccess.Field("ip", "IPAddress", false, nil, "")
	tIpAccess.Field("speed", "Int32", false, nil, "")
	tIpAccess.Field("lat", "Float64", false, nil, "")
	tIpAccess.Field("lon", "Float64", false, nil, "")
	tIpAccess.Field("radius", "Int32", false, nil, "")
	tIpAccess.Field("timestamp", "Int32", false, nil, "")
	sb.AddType(tIpAccess.Build())

	tIpAccessResponse := rdl.NewStructTypeBuilder("Struct", "IpAccessResponse")
	tIpAccessResponse.Field("currentGeo", "CurrentGeo", false, nil, "")
	tIpAccessResponse.Field("travelToCurrentGeoSuspicious", "Bool", true, nil, "")
	tIpAccessResponse.Field("travelFromCurrentGeoSuspicious", "Bool", true, nil, "")
	tIpAccessResponse.Field("precedingIpAccess", "IpAccess", true, nil, "")
	tIpAccessResponse.Field("subsequentIpAccess", "IpAccess", true, nil, "")
	sb.AddType(tIpAccessResponse.Build())

	tIpAccessRecord := rdl.NewStructTypeBuilder("Struct", "IpAccessRecord")
	tIpAccessRecord.Field("username", "String", false, nil, "")
	tIpAccessRecord.Field("unix_timestamp", "Int32", false, nil, "")
	tIpAccessRecord.Field("event_uuid", "String", false, nil, "")
	tIpAccessRecord.Field("ip_address", "IPAddress", false, nil, "")
	tIpAccessRecord.Field("lat", "Float64", false, nil, "")
	tIpAccessRecord.Field("lon", "Float64", false, nil, "")
	tIpAccessRecord.Field("radius", "Int32", false, nil, "")
	sb.AddType(tIpAccessRecord.Build())

	mPostIpAccessRequest := rdl.NewResourceBuilder("IpAccessResponse", "POST", "/")
	mPostIpAccessRequest.Name("postIpAccessRequest")
	mPostIpAccessRequest.Input("request", "IpAccessRequest", false, "", "", false, nil, "")
	mPostIpAccessRequest.Exception("BAD_REQUEST", "ResourceError", "")
	mPostIpAccessRequest.Exception("NOT_FOUND", "ResourceError", "")
	sb.AddResource(mPostIpAccessRequest.Build())

	var err error
	schema, err = sb.BuildParanoid()
	if err != nil {
		log.Fatalf("rdl: schema build failed: %s", err)
	}
}

func SupermanDetectorSchema() *rdl.Schema {
	return schema
}
